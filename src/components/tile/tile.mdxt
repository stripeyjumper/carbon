import { Meta, Story, Canvas } from "@storybook/addon-docs";
import LinkTo from "@storybook/addon-links/react";
import StyledSystemProps from "../../../.storybook/utils/styled-system-props";

import {Tile, TileContent, TileFooter} from ".";

import { Dl, Dt, Dd } from "../definition-list";
import Link from "../link";
import Button from "../button";
import Heading from "../heading";
import { Accordion } from "../accordion";
import Typography from "../typography";
import Box from "../box";
import { ActionPopover, ActionPopoverItem } from "../action-popover";
import Icon from "../icon";
import VerticalDivider from "../vertical-divider";
import Hr from "../hr";

import * as stories from "./tile.stories";

<Meta
  title="Tile"
  parameters={{
    info: { disable: true },
  }}
/>

# Tile

Tiles are containers for static content such as text, and don't contain controls.

## Contents

- [Quick Start](#quick-start)
- [Examples](#examples)
- [Props](#props)

## Quick Start

```javascript
import {Tile, TileContent, TileFooter} from "carbon-react/lib/components/tile";
```

## Designer notes

- Tiles should be reserved for static content. If you require a container with controls or interactive content, use the <LinkTo kind='Card' story='default-story'>Card component</LinkTo> instead.

## Examples

### Default

By default, the Tile component will have a horizontal layout.

<Canvas>
  <Story name="default" story={stories.DefaultStory} />
</Canvas>

### With large roundness on corners

<Canvas>
  <Story name="large roundness" story={stories.LargeRoundness} />
</Canvas>

### Vertical

The Tile component can be also have a vertical layout.

<Canvas>
  <Story name="vertical" story={stories.Vertical} />
</Canvas>

### With TileFooter

<Canvas>
  <Story name="with TileFooter" story={stories.WithTileFooter} />
</Canvas>

### With custom widths

The Tile component can also have a custom `width` which accepts either numbers or strings: any decimal between 0 and 1.0
will be converted into a percentage, any number greater will be be treated as pixels and any valid CSS string will also work.
Any child wrapped by a Tile component can be passed an optional `width` prop if its interface supports it.

<Canvas>
  <Story name="custom Widths" story={stories.CustomWidths} />
</Canvas>

### With custom heights

The Tile component can also have a custom `height` which accepts either numbers or strings: any decimal between 0 and 1.0
will be converted into a percentage, any number greater will be be treated as pixels and any valid CSS string will also work.
Any child wrapped by a Tile component can be passed an optional `height` prop if its interface supports it.

<Canvas>
  <Story name="custom heights" story={stories.CustomHeights} />
</Canvas>

### Active Tile

<Canvas>
  <Story name="active" story={stories.Active} />
</Canvas>

### Custom borders

You can set the `borderVariant` property to alter the border colour as well as the border width with the `borderWidth` property.

<Canvas>
  <Story name="custom borders" story={stories.CustomBorders} />
</Canvas>

### With inline styling

The Tile component can also have inline styling applied to the content.

<Canvas>
  <Story name="with Inline" story={stories.WithInline} />
</Canvas>

### With different padding and margin

<Canvas>
  <Story name="with different padding and margin" story={stories.WithDifferentPaddingAndMargin} />
</Canvas>

### With Definition List

The Definition List component should only be used inside of the Tile component. The purpose of the Definition List component is to mimic
the same tags used in HTML5 but instead they are React elements.

Please note that Dl, Dd and Dt use our common spacing props.

<Canvas>
  <Story name="with Definition List - default" story={stories.WithDefinitionListDefault} />
</Canvas>

### With Definition List and custom `StyledDtDiv` width

Providing a number value to the `w` prop, sets the width of the `<Dt />` element as a percentage. The remaining percentage is then assigned to `<Dd />` to occupy the available space.

<Canvas>
  <Story name="with Definition List and custom width" story={stories.WithDefinitionListAndCustomWidth} />
</Canvas>

### With Definition List with custom text alignment

In this example `dtTextAlign` has been provided the string 'left' and `ddTextAlign` has been provided the string 'right'.

<Canvas>
  <Story name="with Definition and custom text alignment" story={stories.WithDefinitionListAndCustomTextAlignment}/>
</Canvas>

## With Definition List and ActionPopover and Icon support

<Canvas>
  <Story name="with Definition List and ActionPopover and Icon support" story={stories.WithDefinitionListAndActionPopoverAndIconSupport} />
</Canvas>

### With Accordion and Definition List

<Canvas>
  <Story name="with Accordion" story={stories.WithAccordion} />
</Canvas>

### With Accordion and TileFooter

<Canvas>
  <Story name="with Accordion and TileFooter" story={stories.WithAccordionAndTileFooter} />
</Canvas>

## Props

### Tile

<StyledSystemProps
  noHeader
  of={Tile}
  spacing
  width
  spacingDefaults={{ p: 3 }}
/>

### TileFooter

<StyledSystemProps noHeader of={TileFooter} padding />

### Dl

<StyledSystemProps of={Dl} noHeader spacing />

### Dd

<StyledSystemProps of={Dd} noHeader spacing />

### Dt

<StyledSystemProps of={Dt} noHeader spacing />
