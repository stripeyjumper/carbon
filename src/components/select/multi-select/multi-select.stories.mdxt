import { Meta, Canvas, ArgTypes } from "@storybook/addon-docs";
import LinkTo from "@storybook/addon-links/react";
import StyledSystemProps from "../../../../.storybook/utils/styled-system-props";
import TranslationKeysTable from "../../../../.storybook/utils/translation-keys-table";
import SelectTextbox from "../select-textbox/select-textbox.component";
import { MultiSelect, Option } from "../";
import * as stories from "./multi-select.stories";

<Meta title="Select/MultiSelect" parameters={{ info: { disable: true } }} />

# MultiSelect

Select multiple options from the drop-down menu. MultiSelect is a component that allows to choose multiple options from the drop-down list.

## Contents

- [Quick Start](#quick-start)
- [Examples](#examples)
- [Props](#props)
- [Translation keys](#translation-keys)

## Quick Start

```javascript
import { MultiSelect, Option } from "carbon-react/lib/components/select";
```

Always insert `Option` Components inside the `MultiSelect`, analogous to the `<select>` and `<option>` HTML Elements.

If you type printable characters in the Textbox, you can filter through the existing options leaving only those that match the text you typed.

## Examples

### Default

<Canvas name="default" story={stories.Default} />

### List placement

You can use `listPlacement` prop to set the position of the select list relative to the input element.

<Canvas name="list placement" story={stories.ListPlacement} />

### List height

You can use `listMaxHeight` prop to override default max height value of select list.

<Canvas name="list height" story={stories.ListHeight} />

### Controlled Usage

<Canvas name="controlled" story={stories.Controlled} />

### Open on focus

<Canvas name="openOnFocus" story={stories.OpenOnFocus} />

### Disabled

<Canvas name="disabled" story={stories.Disabled} />

### Read Only

<Canvas name="readonly" story={stories.Readonly} />

### With disabled portal

<Canvas name="withDisabledPortal" story={stories.WithDisabledPortal} />

### With multiple columns:

<Canvas name="with multiple columns" story={stories.WithMultipleColumns} />

### Required

You can use the `required` prop to indicate if the field is mandatory.

<Canvas name="required" story={stories.Required} />

### With object as value

Option values could be passed as objects, useful when custom data is associated with an option.
When the `id` property is set, objects will be compared based on that property (could be used when the list is recreated after an API call).
If there is no `id` prop specified on an object, then the exact objects will be compared.

<Canvas name="with object as value" story={stories.WithObjectAsValue} />

### With isLoading prop

When `isLoading` prop is passed, a loader will be appended at the end of the Select List. That functionality could be used to load the options asynchronously.

<Canvas name="with isLoading prop" story={stories.WithIsLoadingProp} />

### Custom colored Pills

It's possible to change the appearance of the selected Pills by using the `borderColor` and `fill` props on `Option` components.

See <LinkTo kind="Documentation/Colors" name="page" story="page">Colors</LinkTo> for more information on usable colors

<Canvas name="with custom colored pills" story={stories.WithCustomColoredPills} />

### With custom maxWidth

In this example the `maxWidth` prop is 50%.

<Canvas name="with custom maxWidth" story={stories.WithCustomMaxWidth} />

#### New designs validation

<Canvas name="validations - string - new design" story={stories.ValidationsStringNewDesign} />

### Pills with long text strings

By default the Pill text will wrap when it overflows the input width, you can override this by
setting the `wrapPillText` prop to false.

<Canvas name="pills with long text" story={stories.PillsWithLongText} />

### Virtual scrolling

The `enableVirtualScroll` prop can be used to enable "virtual scrolling" to only render a few options into the DOM at any one time.
This allows an unlimited amount of children to be passed with little impact on rendering performance.

By default this will render 5 not-currently-visible options into the DOM on either side of the currently-visible ones - this value can
be customised if desired using the `virtualScrollOverscan` prop. Higher values will make scrolling smoother but may negatively impact performance.

<Canvas name="virtualised" story={stories.Virtualised} />

## Props

### Multi Select

<StyledSystemProps of={MultiSelect} noHeader margin />

Due to the `Textbox` component being used internally by the `MultiSelect` component, most of the `Textbox` props are applicable to `MultiSelect`

<ArgTypes of={SelectTextbox} />

**Any other supplied props will be provided to the underlying HTML input element**

### Props of the Option Component

<ArgTypes of={Option} />

## Translation keys

The following keys are available to override the translations for this component by passing in a custom locale object to the
[i18nProvider](https://carbon.sage.com/?path=/story/documentation-i18n--page).

<TranslationKeysTable
  translationData={[
    {
      name: "select.placeholder",
      description: "The text for the input component placeholder",
      type: "func",
      returnType: "string",
    },
  ]}
/>
