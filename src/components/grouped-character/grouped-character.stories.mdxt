import { useState } from "react";
import { Meta, Story, Canvas, ArgsTable } from "@storybook/addon-docs";

import StyledSystemProps from "../../../.storybook/utils/styled-system-props";
import GroupedCharacter from ".";
import * as stories from "./grouped-character.stories";

<Meta title="GroupedCharacter" parameters={{ info: { disable: true } }} />

# GroupedCharacter

Capture data with punctuation inside the field.

Fields can have punctuation within them (most commonly characters like - or /). This gives the user a clue about the format accepted.

## Contents

- [Quick Start](#quick-start)
- [Examples](#examples)
- [Props](#props)

## Quick Start

```javascript
import GroupedCharacter from "carbon-react/lib/components/grouped-character";
```

## Examples

### Default

<Canvas>
  <Story name="default" story={stories.DefaultStory} />
</Canvas>

### Sizes

<Canvas>
  <Story name="sizes" story={stories.Sizes} />
</Canvas>

### AutoFocus

<Canvas>
  <Story name="autoFocus" story={stories.AutoFocus} />
</Canvas>

### LabelAlign

<Canvas>
  <Story name="labelAlign" story={stories.LabelAlign} />
</Canvas>

### Disabled

<Canvas>
  <Story story={stories.Disabled} name="disabled" />
</Canvas>

### Various separators

<Canvas>
  <Story name="various separators" story={stories.VariousSeparators} />
</Canvas>

### Various groups

<Canvas>
  <Story name="various groups" story={stories.VariousGroups} />
</Canvas>

### With labelInline

<Canvas>
  <Story story={stories.LabelInline} name="with labelInline" />
</Canvas>

### With custom labelWidth and inputWidth

<Canvas>
  <Story
    story={stories.LabelInputWidth}
    name="with custom labelWidth and inputWidth"
  />
</Canvas>

### With custom maxWidth

<Canvas>
  <Story name="with custom maxWidth">
    {() => {
      const [state, setState] = useState("1231231");
      const setValue = ({ target }) => {
        setState(target.value.rawValue);
      };
      return (
        <GroupedCharacter
          label="GroupedCharacter"
          value={state}
          onChange={setValue}
          groups={[2, 2, 3]}
          separator="-"
          maxWidth="50%"
        />
      );
    }}
  </Story>
</Canvas>


### With fieldHelp

<Canvas>
  <Story story={stories.FieldHelp} name="with fieldHelp" />
</Canvas>

### with inputHint

When the `inputHint` prop is passed, please use a full stop `.` at the end. This forces a pause 
before any other announcements, this well help screen reader users understand the hint fully.

<Canvas>
  <Story name="with inputHint" story={stories.InputHint} />
</Canvas>

### With labelHelp

<Canvas>
  <Story story={stories.LabelHelp} name="with labelHelp" />
</Canvas>

### Required

You can use the `required` prop to indicate if the field is mandatory.

<Canvas>
  <Story story={stories.Required} name="required" />
</Canvas>

### Validations

Validation status can be set by passing `error`, `warning` or `info` prop to the component

Passing a string to these props will display a properly colored border along with a validation icon and tooltip - string value will be displayed as the tooltip message.

Passing a boolean to these props will display only a properly colored border.

For more information check our [Validations](?path=/docs/documentation-validations--page "Validations") documentation page

#### As a string

<Canvas>
  <Story
    name="validations - string - component"
    story={stories.ValidationsStringComponent}
  />
</Canvas>

It is possible to use the `tooltipPosition` to override the default placement of tooltips rendered as part of this component.

<Canvas>
  <Story
    name="validations - string - with tooltipPosition overriden - component"
    story={stories.ValidationsTooltip}
  />
</Canvas>

#### As a string, displayed on label

<Canvas>
  <Story
    name="validations - string - label"
    story={stories.ValidationsStringLabel}
  />
</Canvas>

It is possible to use the `tooltipPosition` to override the default placement of tooltips rendered as part of this component.

<Canvas>
  <Story
    name="validations - string - with tooltipPosition overriden - label"
    story={stories.ValidationsTooltipLabel}
  />
</Canvas>

#### New designs validation

<Canvas>
  <Story
    name="validations - string - new design"
    story={stories.ValidationsRedesign}
  />
</Canvas>

#### As a boolean

<Canvas>
  <Story name="validations - boolean" story={stories.ValidationsBoolean} />
</Canvas>

## Props

### GroupedCharacter

<StyledSystemProps of={GroupedCharacter} noHeader margin />

**Any other supplied props will be provided to the underlying HTML input element**
