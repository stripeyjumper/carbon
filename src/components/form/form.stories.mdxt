import { Meta, Story, Canvas } from "@storybook/addon-docs";
import TranslationKeysTable from "../../../.storybook/utils/translation-keys-table";
import StyledSystemProps from "../../../.storybook/utils/styled-system-props";
import Form from ".";
import * as stories from "./form.stories";

<Meta title="Form" parameters={{ info: { disable: true }, controls: { disable: true } }} />

# Form

Represents a document section containing interactive controls for submitting information.

## Contents

- [Quick Start](#quick-start)
- [Examples](#examples)
- [Props](#props)
- [Translation keys](#translation-keys)

## Quick Start

To use Form, import the `Form` and pass the content, usually various inputs, as children.
You can provide a save button using the `saveButton` prop.

```javascript
import Form from "carbon-react/lib/components/form";
```

## Examples

### With sticky footer

When `stickyFooter` prop is set as true, footer becomes stickied to the bottom of the screen when necessary - this also works in `Dialog` and `DialogFullScreen`

<Canvas>
  <Story
    name="default with sticky footer"
    story={stories.DefaultWithStickyFooter}
  />
</Canvas>

### Full Width Buttons

<Canvas>
  <Story
    name="with full width buttons"
    story={stories.WithFullWidthButtons}
  />
</Canvas>

### With different spacing

When `fieldSpacing` prop is given a value, the vertical spacing between the form fields is changed (margin bottom on each field), the value of the prop multiplied by the base theme `8px` spacing value. The default is value `3` which is therefore `24px`. This can be overriden on a specific field if needed.

<Canvas>
  <Story name="with different spacing" story={stories.WithDifferentSpacing} />
</Canvas>

### Override spacing on one field

A child component (which uses `FormField`) can be given a `mb` prop which overrides the bottom margin for that particular field. This uses the same base theme `8px` multiplier as the Form `fieldSpacing` prop.

<Canvas>
  <Story name="override field spacing" story={stories.OverrideFieldSpacing} />
</Canvas>

### Validations

When either `errorCount` or `warningCount` or both are provided, summary with the number of errors and/or warnings is rendered wrapping the save button.

<Canvas>
  <Story name="with errors summary" story={stories.WithErrorsSummary} />
</Canvas>

<Canvas>
  <Story name="with warnings summary" story={stories.WithWarningsSummary} />
</Canvas>

<Canvas>
  <Story name="with both errors and warnings summary" story={stories.WithBothErrorsAndWarningsSummary} />
</Canvas>

### Buttons variations

Additional buttons can be passed using `leftSideButtons` and `rightSideButtons` props.

<Canvas>
  <Story name="with additional buttons" story={stories.WithAdditionalButtons} />
</Canvas>

When `buttonAlignment` prop is set as `left`, buttons are aligned to the left side.

<Canvas>
  <Story name="with buttons aligned to the left" story={stories.WithButtonsAlignedToTheLeft} />
</Canvas>

### In Dialog

It is possible to render `Form` as a content of `Dialog` component.

<Canvas>
  <Story name="in Dialog" story={stories.InDialog} />
</Canvas>

#### With sticky footer

<Canvas>
  <Story name="in Dialog with sticky footer" story={stories.InDialogWithStickyFooter} />
</Canvas>

### In DialogFullScreen

It is possible to render `Form` as a content of `DialogFullScreen` component.

<Canvas>
  <Story name="in DialogFullScreen" story={stories.InDialogFullScreen} />
</Canvas>

#### With sticky footer

<Canvas>
  <Story name="in DialogFullScreen with sticky footer" story={stories.InDialogFullScreenWithStickyFooter} />
</Canvas>

### Form alignment

An example of how to align different kinds of input components within a `Form`. It is possible to line up all of the inputs and all of the labels in any configuration required. The spacing between inputs and labels can be `8px` or `16px`, and this can be controlled with the `labelSpacing` prop on the input components. Most of them default to `16px`

These input components are spaced vertically with the `fieldSpacing` prop on `Form`, and this can be overriden on any input component using the `mb` (margin bottom) prop.

If a component doesn't have an inline labels on the left (see the Checkboxes below), it is possible to align them using a `ml` (margin left) prop. The left margins on these components should be the same as the label width of the above and below components in order to align correctly.

Please click on "Show code" below to see how to set these components up for alignment.

<Canvas>
  <Story name="form alignment example" story={stories.FormAlignmentExample} />
</Canvas>

### With labels inline

<Canvas>
  <Story name="with labels inline" story={stories.WithLabelsInline} />
</Canvas>

### With custom footer padding

<Canvas>
  <Story
    name="custom footer padding"
    story={stories.WithCustomFooterPadding}
  />
</Canvas>

## Props

### Form

<StyledSystemProps of={Form} spacing noHeader />

## Translation keys

The following keys are available to override the translations for this component by passing in a custom locale object to the
[i18nProvider](https://carbon.sage.com/?path=/story/documentation-i18n--page).

<TranslationKeysTable
  translationData={[
    {
      name: "error.messages.formSummary",
      description:
        "The text to displayed when there are errors or warnings present in the form",
      type: "func",
      returnType:
        "an array of strings when validation failures and null when no failures",
    },
  ]}
/>
