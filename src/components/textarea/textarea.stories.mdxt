import { useState } from "react";
import { Meta, Story, Canvas } from "@storybook/addon-docs";
import StyledSystemProps from "../../../.storybook/utils/styled-system-props";

import Textarea from ".";
import { OriginalTextarea } from "./textarea.component";
import Box from "../box";
import CarbonProvider from "../carbon-provider/carbon-provider.component";
import TranslationKeysTable from "../../../.storybook/utils/translation-keys-table";

import * as stories from "./textarea.stories";

<Meta title="Textarea" parameters={{ info: { disable: true } }} />

# Textarea

<a
  target="_blank"
  href="https://zeroheight.com/2ccf2b601/p/20f5ea-text-area"
  style={{ color: '#007E45', fontWeight: 'bold', textDecoration: 'underline' }}
>
  Product Design System component 
</a>

- Useful for collecting a significant amount of text (e.g. notes about clients, or a short email message).
- If content in a textarea is read-only, remove the field border so it appears as static text.
- Use placeholder text to give the user context or examples of what to write.

## Contents

- [Quick Start](#quick-start)
- [Examples](#examples)
- [Props](#props)

## Quick Start

```javascript
import Textarea from "carbon-react/lib/components/textarea";
```

## Examples

### Default
<Canvas>
  <Story name="default" story={stories.DefaultStory} />
</Canvas>

### Disabled

<Canvas>
  <Story name="disabled" story={stories.DisabledStory} />
</Canvas>

### Label Align

<Canvas>
  <Story name="label Align" story={stories.LabelAlignStory} />
</Canvas>

### ReadOnly

<Canvas>
  <Story name="readOnly" story={stories.ReadOnlyStory} />
</Canvas>

### AutoFocus

<Canvas>
  <Story
    name="autoFocus"
    story={stories.AutoFocusStory}
  />
</Canvas>

### Expandable

<Canvas>
  <Story
    name="expandable"
    story={stories.ExpandableStory}
  />
</Canvas>

### With characterLimit

If you use the `inputHint` prop to provide the user with a hint before the input, please use a full stop `.` at the end,
as it forces a pause before any other announcements, this well help screen reader users understand the hint fully.

<Canvas>
  <Story name="with characterLimit" story={stories.CharacterLimitStory} />
</Canvas>


### with characterLimit - with translations

Various translations can be applied to both the visually hidden hint message, and the character 
counter below the input. 

These translations have been split up to include a number which represents the current character count which
is over/under the set `characterLimit`. Please see below how this has been achieved with a French translation.
Include the formatted number count wherever makes sense for the language you're translating too.

<Canvas>
  <Story 
    name="with characterLimit with translations" 
    story={stories.TranslationsCharacterLimitStory}
  />
</Canvas>

### With labelInline

<Canvas>
  <Story name="with labelInline" story={stories.LabelInlineStory} />
</Canvas>

### With custom labelWidth and inputWidth

<Canvas>
  <Story
    name="with custom labelWidth and inputWidth"
    story={stories.CustomWidthStory}
  />
</Canvas>

### With custom maxWidth

<Canvas>
  <Story name="with maxWidth" story={stories.MaxWidthStory} />
</Canvas>

### With fieldHelp

<Canvas>
  <Story name="with fieldHelp" story={stories.FieldHelpStory} />
</Canvas>

### With inputHint

When the `inputHint` prop is passed, please use a full stop `.` at the end. This forces a pause 
before any other announcements, this well help screen reader users understand the hint fully.

<Canvas>
  <Story name="with inputHint" story={stories.InputHintStory} />
</Canvas>

### With labelHelp

<Canvas>
  <Story name="with labelHelp" story={stories.LabelHelpStory} />
</Canvas>

### Required

You can use the `required` prop to indicate if the field is mandatory.

<Canvas>
  <Story name="required" story={stories.RequiredStory} />
</Canvas>

### Validations

Validation status can be set by passing `error`, `warning` or `info` prop to the component

Passing a string to these props will display a properly colored border along with a validation icon and tooltip - string value will be displayed as the tooltip message.

Passing a boolean to these props will display only a properly colored border.

For more information check our [Validations](?path=/docs/documentation-validations--page "Validations") documentation page

#### As a string

<Canvas>
  <Story
    name="validations - string - component"
    story={stories.ValidationStringStory}
  />
</Canvas>

It is possible to use the `tooltipPosition` to override the default placement of tooltips rendered as part of this component.

<Canvas>
  <Story
    name="validations - string - with tooltipPosition overriden - component"
    story={stories.ValidationStringPositionStory}
  />
</Canvas>

#### As a string, displayed on label

<Canvas>
  <Story name="validations - string - label" story={stories.ValidationLabelStory} />
</Canvas>

It is possible to use the `tooltipPosition` to override the default placement of tooltips rendered as part of this component.

<Canvas>
  <Story
    name="validations - string - with tooltipPosition overriden - label"
    story={stories.ValidationLabelPositionStory}
  />
</Canvas>

#### New designs validation

<Canvas>
  <Story name="validations - string - new design" story={stories.NewDesignValidationStory}/>
</Canvas>

#### As a boolean

<Canvas>
  <Story name="validations - boolean" story={stories.ValidationBooleanStory}/>
</Canvas>

## Props

### Textarea

<StyledSystemProps of={OriginalTextarea} noHeader margin />

**Any other supplied props will be provided to the underlying HTML input element**

<TranslationKeysTable
  translationData={[
    {
      name: "characterCount.tooManyCharacters",
      description:
        "The message displayed below the input which will inform"
        +" users if they have exceeded the set `characterLimit` and how much by." 
        +" This will also be announced to screen readers.",
      type: "func",
      returnType: "string",
    },
        {
      name: "characterCount.charactersLeft",
      description:
        "The message displayed below the input which will inform"
        +" users how many characters they have before they reach  or exceed the"
        +" set `characterLimit`. This will also be announced to screen readers.",      
        type: "func",
      returnType: "string",
    },
        {
      name: "characterCount.visuallyHiddenHint",
      description:
        "The message which will be read out to screen reader users, informing them"
        +" of the set `characterLimit`.",
      type: "func",
      returnType: "string",
    },
  ]}
/>